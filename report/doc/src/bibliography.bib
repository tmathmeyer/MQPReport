@unpublished{checksims1,
    author={Matthew Heon, Dolan Murvihill},
    title={Program Similarity Detection with Checksims},
    note={Major Qualifying Project report},
    month={April},
    year={2015},
    url={https://www.wpi.edu/Pubs/E-project/Available/E-project-043015-122310/unrestricted/CheckSims.pdf},
    annote={Original Checksims paper. FILL THIS IN WITH QUOTES AND THE THINGS WE WILL CITE IT FOR}
}

@mastersthesis{STFingerprinting,
    author={Michel Chilowicz, Etienne Duris and Gilles Roussel},
    title={Syntax tree fingerprinting: a foundation for source code similarity detection},
    school={Université Paris-Est},
    year={2011},
    annote={
        Chilowicz, Duris, and Roussel use Abstract Syntax Tree fingerprinting
        methods to index code and efficiently search for code duplication.
        Various fingerprinting methods are outlined and explored. Their methods
        are used to analyze a well known codebase and the results are discussed.
    }
}

@mastersthesis{STVsm,
    author={Ning Li, Mingda Shen, Sinan Li, Lijun Zhang, and Zhanhuai Li},
    title={STVsm: Similar Structural Code Detection Based on AST and VSM},
    school={Northwestern Polytechnical University, Xi’an},
    year={2012},
    annote={
        Li, Li, Li, Shen, and Zhang outline the use of Asbtract Syntax Trees.
        The groups outlines various methods of comparing text similarity.
        Rather than using text comparison directly on the source, the source is
        first parsed using \textit{ANTLR}\cite{antlr-lang}, and a
        LISP\cite{original-lisp} representation of the tree is compared.
    }
}

@unpublished{antlr-lang,
    author={Terence Parr},
    title={ANTLR},
    note={ANTLR is a parser generator that can be found at http://www.antlr.org/},
    annote={
        ANTLR (ANother Tool for Language Recognition) is a powerful parser
            generator for reading, processing, executing, or translating
            structured text or binary files. It's widely used to build
            languages, tools, and frameworks. From a grammar, ANTLR generates a
            parser that can build and walk parse trees.    
    }
}

@unpublished{original-lisp,
    author={John McCarthy},
    title={Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I},
    note={original paper where the foundations of \textit{LISP} were layed out},
    year={1958},
    annote={
        McCarthy describes a turing complete language based on simple
            arithmetic, conditional, and lambda calculus operations. Though his
            original language LISP was based on M-Expressions, these would be
            transformed by some interpreter into a reverse Polish notation form
            called an S-Expression. It is the S-Expression form which is
            discussed and for which a grammar is provided.
    }
}

@online{turninurl,
    author={Andrey Sklyar, Danny Yoo, Ryan Danas and Kathi Fisler},
    title={turnin},
    url={https://turnin.cs.wpi.edu/turnin.rkt},
    note={Worcester Polytechnic Institute online homework submission},
    annote={
        \textit{turnin} is a built within the computer science departments at
            Worcester Polytechnic Institute. It was created by Professor Kathi
            Fisler with help from students.
    }
}
