\section{Methodology}
Testing a project like \textit{Checksims} is a difficult process, as determinig
success is dependant on a corpus of data in which one or more pairs of
assignments have made an attempt to conceal their unauthorized copying. While
it would be possible to use artifical copora, they are extremly difficult to
create in such a way that they mimic a real life scenario.  Acquiring a real
sample of student submissions is also a difficult process, though the
challenges are more in the realm of ethics than technical difficulties. To
mitigate the issues of testing \textit{Checksims} on a real corpus of data,
such a corpus must be altered such that each assignment becomes anonymous.

\subsection{Anonymization}
Three scripts were created to process assignments and strip from them all
indication of student identity; each language, Python, C, and Java, requires
their own method of stripping comments and names. Java and C share a common
style of commenting, though C programs can also use the preprocessor to store
comments without comment notation:

\lstinputlisting{code/C-if-0.c} % C #if 0 comment

The python language supports two types of comments. Everything between a \#
symbol and the end of a line is considered a comment, and any multi-line string
(denoted by three double quotes) at the beginning of a function is considered
comment, and called a ``Docstring''. The three scripts used for making
assignments anonymous can be found in appendicies B, C, and D.

\subsection{Output of checksims}
Between any two assignments A and B, there are two percents generated --- the
percent of A that is matched in B, and the percent of B that is matched in A.
These are referred to as the matching value and inverse matching value. There
are two forms of output most commonly used by checksims: the HTML view and the
threshold printer view. The HTML view is an HTML file displaying a matrix with
the comparison percentages for every pair of assignments, excluding assignments
compared with themselves. Each space in the matrix is also color coded from a
faint yellow for low matching percents to a bright red for highly matching
percentages. The threshold printer sorts each pair by the maximum of \{matching
value, inverse matching value\}. Any pairs over a specified percentage will be
reported, with the default percentage being 70.

\subsection{Environments and Corpora}
\subsubsection{Testing Corpora}
Listed below is the set of corpora used for testing \textit{Checksim}. Each
corpus will be referenced in the results section by the name provided here.
\\
\\
\begin{tabular}{@{}lll@{}}
    \toprule
    Name    & Language & Description \\ \midrule
    3.a13.1 & C        & The first assignment in the 2013 Systems (2303) class            \\
    3.a13.2 & C        & The second assignment in the 2013 Systems (2303) class            \\
    3.a13.3 & C        & The third assignment in the 2013 System (2303) class            \\
    2.b14.2 & Java     & The second assignment in the 2014 OOP (2102) class            \\
            &          &             \\ \bottomrule
\end{tabular}
\subsubsection{Testing Environment}
Checksims has been tested on many systems, in order to measure the
effectiveness in the runtime and memory usage for each corpus of data. The
machines listed below have been used to test every corpus of data previously
mentioned. They may be referenced by name in the results section.
\\
\\
\begin{tabular}{@{}llll@{}}
    \toprule
    Name & Processor Threads & Processor Speed & Ram     \\ \midrule
    L1   & 4                 & 2600 MHz        & 4 GB    \\
    L2   & 4                 & 2600 MHz        & 6 GB    \\
    S1   & 8                 & 3900 MHz        & 32 GB   \\
    S2   & 12                & 2600 MHz        & 128 GB  \\
         &                   &                 &         \\ \bottomrule
\end{tabular}
