\section{Introduction}
\label{sec:intro}
\textit{Checksims} is a tool developed at WPI to help teaching staff combat
academic dishonesty in the scope of programming assignments. The current
implementation of \textit{Checksims} uses the Smith-Waterman sequence alignment
algorithm~\cite{checksims1} to compare pairs of assignments within a corpora of
assignments, usually one class’s worth. This algorithm assigns a percent score
for how much overlap there is between any two assignments, and it flags pairs
that have a matching percentage above a certain threshold. The removal of
common code is another feature, provided in order to accommodate the
assignments given in certain classes. Despite the success of \textit{Checksims}
so far, it is possible to subvert its functionality given knowledge of the
Smith-Waterman algorithm. There are certain techniques, such as renaming
variables, reordering order-independent statements, and generally shuffling
parts of code within or between files, that the authors believe are sufficient
enough to fool the Smith Waterman algorithm.  Smith-Waterman was originally
designed to compare sequences of genomes, which are one dimensional sequences
of data.  Code is not a one dimensional sequence however; It can be represented
as a tree that is tagged with names and identifiers. This sequence-tree duality
of code allows individual submissions to be compared not only as a linear
sequence analysis problem but also as a two dimensional structure, providing an
interesting and not well studied field in which research can be done.

\subsection{Original Goals}
\label{sec:mattdolangoals}
The original goals of the \textit{Checksims} project were set forth in the
paper by Matt Heon and Dolan Murvihill~\cite{checksims1}. The original goals
were as follows:
\begin{itemize}
  \item The program should be usable by course staff with very little or no
      training, and should produce output in a form that can be easily
      interpreted.
  \item The output itself should not be a definitive accusation of academic
      wrongdoing; instead, it should simply flag suspicious submissions for
      further review by course staff.
  \item The detector should to be complete and usable within seven weeks; this
      requirement placed a severe time limit on implementation and encouraged
      the implementation of a relatively small set of features.
  \item The detector should not attempt to perform language-specific analysis
      of the source code, but instead only interpret submissions as plain text.
      The language-agnostic requirement came from the time constraint and
      the potential that the detector would be used for a number of courses
      using various languages.
  \item The algorithm should be run locally and preferably be easy to invoke
      once student submissions are closed.
  \item The detector should be made to match Professor Lauer’s specific
      definition of similarity and academic dishonesty, which tends to be
      permissive of relatively similar code so long as it was not copied,
      either by computerized means or by retyping verbatim.
\end{itemize}


\subsection{Project Goals}
\label{sec:goals}
This project is intended to slightly modify some of these goals and to finish
the implementation of some others. The first priority of this project is a
research goal, which is to compare a syntax tree based approach to the current
Smith-Waterman algorithm approach. This requires that the original goal of
language independence be disregarded, as every language will require it’s own
parser from source to Abstract Syntax Tree, or AST\@. This project will focus
first on the languages that are most commonly used at Worcester Polytechnic
Institute (WPI): C, Python, and Java. The second priority is to make
\textit{Checksims} even easier to use for course staff.  Currently,
\textit{Checksims} is a command line tool, requiring many arguments to work
correctly.  One of the new goals for this project is to integrate
\textit{Checksims} with the online assignment submission system used by the CS
department called \textit{turnin}~\cite{turninurl}. This integration should be
able to compare submissions not only within one class, but also compare current
submissions against submissions in previous offerings of the class. In short,
the goals of this project are as follows:
\begin{itemize}
  \item Design and implement an AST similarity detection algorithm, and then
      compare it to the Smith-Waterman in both accuracy and performance.
  \item Design a format and archiving system for comparing submissions not only
      to one another, but to previous course submissions as well.
  \item Integrate \textit{Checksims} with \textit{turnin}, the most commonly
      used tool for computer science assignment submissions at WPI\@.
  \item Create a graphical user interface for \textit{Checksims}, as currently
      it requires use of a command line interface.
\end{itemize}
